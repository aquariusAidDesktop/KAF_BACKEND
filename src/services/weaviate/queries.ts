import { Collection } from "weaviate-client";
import { connectToWeaviate } from "./client";
import { collectionConfig } from "./schema";
import logger from "../utils/logger";

interface ExtendedCollectionConfig {
  name: string;
}

export const searchBySimilarity = async (queryText: string, limit = 5) => {
  const client = await connectToWeaviate();

  try {
    const collection = client.collections.get(collectionConfig.class);
    const result = await collection.query.nearText(queryText, { limit });

    logger.info("üîç –ó–∞–≤–µ—Ä—à–∏–ª —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫");
    return result.objects;
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–∏—Å–∫–µ: ${error}`);
    return null;
  }
};

export const searchByKeyword = async (queryText: string, limit = 5) => {
  const client = await connectToWeaviate();

  try {
    const collection = client.collections.get(collectionConfig.class);
    const result = await collection.query.bm25(queryText, { limit });

    logger.info("üîç –ó–∞–≤–µ—Ä—à–∏–ª –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º");
    return result.objects;
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${error}`);
    return null;
  }
};

export const searchHybrid = async (
  queryText: string,
  limit = 5,
  alpha = 0.5
) => {
  const client = await connectToWeaviate();

  try {
    const collection = client.collections.get(collectionConfig.class);
    const result = await collection.query.hybrid(queryText, { alpha, limit });

    logger.info("üîç –ó–∞–≤–µ—Ä—à–∏–ª –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫");
    return result.objects;
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–º –ø–æ–∏—Å–∫–µ: ${error}`);
    return null;
  }
};

export const createCollection = async (): Promise<Collection<
  any,
  string
> | null> => {
  const client = await connectToWeaviate();

  try {
    const existingCollections =
      (await client.collections.listAll()) as ExtendedCollectionConfig[];
    const exists = existingCollections.find(
      (col) => col.name === collectionConfig.class
    );
    if (exists) {
      logger.info(`–ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionConfig.class} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
      return client.collections.get(collectionConfig.class);
    }

    const newCollection = await client.collections.createFromSchema(
      collectionConfig
    );
    logger.info(`üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${newCollection.name}`);
    return newCollection;
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${error}`);
    return null;
  }
};

export const deleteAllCollections = async (): Promise<void> => {
  const client = await connectToWeaviate();

  try {
    const collections =
      (await client.collections.listAll()) as ExtendedCollectionConfig[];
    for (const coll of collections) {
      await client.collections.delete(coll.name);
      logger.info(`–£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: ${coll.name}`);
    }
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${error}`);
  }
};

export const addDocument = async (document: any): Promise<void> => {
  const client = await connectToWeaviate();

  try {
    const existingCollections =
      (await client.collections.listAll()) as ExtendedCollectionConfig[];
    const exists = existingCollections.find(
      (col) => col.name === collectionConfig.class
    );
    if (!exists) {
      throw new Error(`–ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionConfig.class} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    const collection = client.collections.get(collectionConfig.class);
    await collection.data.insert(document);
    logger.info("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω");
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${error}`);
  }
};

export const testAddDocument = async (): Promise<void> => {
  const testDocument = {
    title: "Sample Book Title",
    author: "Author Name",
    text: "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç—Ä—ã–≤–∫–∞ –∏–∑ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é text2vec-transformers.",
    page: 10,
    published_year: 2025,
    language: "en",
  };

  await addDocument(testDocument);
};
