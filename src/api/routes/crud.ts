import { Router, Request, Response } from "express";
import {
  createCollection,
  deleteAllCollections,
  searchByKeyword,
  searchBySimilarity,
  searchHybrid,
  testAddDocument,
} from "../../services/weaviate";
import logger from "../../services/utils/logger";
import { startLocalProcess } from "../../services/utils/fragmentTextServer";

const router = Router();

router.post("/search/similarity", async (req: Request, res: Response) => {
  const { queryText, limit = 5 } = req.body;

  if (!queryText) {
    res.status(400).json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä 'queryText'" });
    return;
  }

  const results = await searchBySimilarity(queryText, limit);
  res.json(results || []);
  return;
});

router.post(
  "/search/keyword",
  async (req: Request, res: Response): Promise<void> => {
    const { queryText, limit = 5 } = req.body;

    if (!queryText) {
      res.status(400).json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä 'queryText'" });
      return;
    }

    const results = await searchByKeyword(queryText, limit);
    res.json(results || []);
    return;
  }
);

router.post(
  "/search/hybrid",
  async (req: Request, res: Response): Promise<void> => {
    const { queryText, limit = 5, alpha = 0.5 } = req.body;

    if (!queryText) {
      res.status(400).json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä 'queryText'" });
      return;
    }

    const results = await searchHybrid(queryText, limit, alpha);
    res.json(results || []);
    return;
  }
);

router.post(
  "/collections/create",
  async (req: Request, res: Response): Promise<void> => {
    const collection = await createCollection();
    if (!collection) {
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏" });
      return;
    }
    res.json({ message: "–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞", collection });
    return;
  }
);

router.post(
  "/collections/delete",
  async (req: Request, res: Response): Promise<void> => {
    try {
      await deleteAllCollections();
      res.json({ message: "–í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã" });
      return;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${error}`);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π" });
      return;
    }
  }
);

router.post("/documents/test", async (req: Request, res: Response) => {
  try {
    await testAddDocument();
    res.status(200).json({ message: "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω" });
    return;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${error}`);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞" });
    return;
  }
});

// üîπ –ù–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
router.post("/process/start", async (req: Request, res: Response) => {
  try {
    await startLocalProcess();
    res.status(200).json({ message: "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω" });
    return;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${error}`);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞" });
    return;
  }
});

export default router;
